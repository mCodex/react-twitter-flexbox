{"version":3,"sources":["assets/search.svg","components/Content/index.js","components/Header/styles.js","components/Header/index.js","pages/Home/index.js","serviceWorker.js","styles/global.js","index.js"],"names":["module","exports","styled","div","Container","header","Wrapper","RightContainer","searchIcon","Header","Content","icon","faHome","faBell","faEnvelope","faTwitter","color","size","type","faUserCircle","Home","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,oC,ySCE5BC,UAAOC,IAAtB,K,01CCEO,IAAMC,EAAYF,IAAOG,OAAV,KAMTC,EAAUJ,IAAOC,IAAV,KA2BPI,EAAiBL,IAAOC,IAAV,IAkBGK,KCNfC,EAnCA,WACb,OACE,kBAACL,EAAD,KACE,kBAACM,EAAD,KACE,kBAACJ,EAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAiBK,KAAMC,MADzB,QAIA,4BACE,kBAAC,IAAD,CAAiBD,KAAME,MADzB,iBAIA,4BACE,kBAAC,IAAD,CAAiBF,KAAMG,MADzB,cAMJ,kBAAC,IAAD,CAAiBH,KAAMI,IAAWC,MAAM,UAAUC,KAAK,OAEvD,kBAACV,EAAD,KACE,2BAAOW,KAAK,SACZ,kBAAC,IAAD,CAAiBP,KAAMQ,IAAcF,KAAK,OAE1C,4BAAQC,KAAK,UAAb,cC/BGE,EAJF,WACX,OAAO,kBAAC,EAAD,OCKHC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,8hBC9FlDC,kBAAf,KCKAC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFUnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,0BAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,0BAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OEhC/BE,K","file":"static/js/main.6a1cbbf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.c6a0effb.svg\";","import styled from 'styled-components';\n\nexport default styled.div`\n  max-width: 1100px;\n  margin: 0 auto;\n  padding: 0 30px;\n  height: 100%;\n`;\n","import styled from 'styled-components';\n\nimport searchIcon from '../../assets/search.svg';\n\nexport const Container = styled.header`\n  height: 46px;\n  background: #fff;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 100%;\n\n  nav {\n    ul {\n      display: flex;\n      list-style: none;\n\n      li {\n        font-size: 13px;\n        color: #667580;\n        font-weight: bold;\n\n        & + li {\n          margin-left: 30px;\n        }\n        svg {\n          margin-right: 7px;\n        }\n      }\n    }\n  }\n`;\n\nexport const RightContainer = styled.div`\n  display: flex;\n\n  svg {\n    margin: 0 15px;\n    width: 34px;\n    height: 34px;\n  }\n\n  input {\n    width: 220px;\n    background: #f5f8fa;\n    border: 1px solid #e6ecf0;\n    height: 34px;\n    padding: 0 30px 0 12px;\n    font-size: 12px;\n    color: #667581;\n    border-radius: 16px;\n    background: #f5f8fa url(${searchIcon}) no-repeat 190px center;\n    background-size: 20px 20px;\n  }\n\n  button {\n    height: 34px;\n    background: #3bb9e3;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    width: 90px;\n    font-weight: bold;\n    font-size: 14px;\n    color: #fff;\n    border: 0;\n    border-radius: 16px;\n  }\n`;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faHome,\n  faBell,\n  faEnvelope,\n  faUserCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nimport Content from '../Content';\n\nimport { Container, RightContainer, Wrapper } from './styles';\n\nconst Header = () => {\n  return (\n    <Container>\n      <Content>\n        <Wrapper>\n          <nav>\n            <ul>\n              <li>\n                <FontAwesomeIcon icon={faHome} />\n                Home\n              </li>\n              <li>\n                <FontAwesomeIcon icon={faBell} />\n                Notifications\n              </li>\n              <li>\n                <FontAwesomeIcon icon={faEnvelope} />\n                Messages\n              </li>\n            </ul>\n          </nav>\n          <FontAwesomeIcon icon={faTwitter} color=\"#55acee\" size=\"2x\" />\n\n          <RightContainer>\n            <input type=\"text\" />\n            <FontAwesomeIcon icon={faUserCircle} size=\"3x\" />\n\n            <button type=\"button\">Tweet</button>\n          </RightContainer>\n        </Wrapper>\n      </Content>\n    </Container>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport Header from '../../components/Header';\n\n// import { App, Box } from './styles';\n\nconst Home = () => {\n  return <Header />;\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n\n* {\n     margin: 0;\n     padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n }\n \n html,body,#root {\n    height: 100%;\n }\n\n body {\n     font-family: 'Helvetica Neue', 'Helvetica', Arial, sans-serif;\n     background: #E6ECF0;\n     -webkit-font-smoothing: antialiased !important;\n     text-rendering: optimizeLegibility !important;\n }\n\n body, input , button {\n     font: 14px Lato, sans-serif;\n }\n \n button {\n     cursor: pointer;\n }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nimport GlobalStyle from './styles/global';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}